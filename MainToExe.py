#Tomer Paz 315311365
#Topaz Tcherkafs 206867871

import base64
import csv
import math
import sys

import cloudpickle

inFile = sys.argv[1]
outFile = sys.argv[2]

funcFinal = 'gAWVYQ0AAAAAAACMF2Nsb3VkcGlja2xlLmNsb3VkcGlja2xllIwNX2J1aWx0aW5fdHlwZZSTlIwKTGFtYmRhVHlwZZSFlFKUKGgCjAhDb2RlVHlwZZSFlFKUKEt4SwBLAEt4SzpLQ0KmBQAAdAB0AXQCdAN8IXwhgwJ8VYMCgwF0BGQBdAR0AHQFfHJ0BGQBdAN0A3QEdAB0BXxydARkAXQDdARkAnQCfCt8O4MCdAN0Bnw3dAF0AnQEZAF8aXQGdARkAnQGfDt8N4MCdAN8FXQHfC+DAYMCgwN0BGQBdAN8BXQDdAZ8O3wPgwJ8IYMCgwJ0AXQCdARkAXw7fD2DA3w1gwKDAYMDgwKDA3wVgwKDAYMCdAN0A3w8dAN8BXQGfDt8O4MCgwKDAnQDfAV0Bnw3fDuDAoMCgwKDAoMDdAZ0BGQBdAZ8O3w3gwJ0A3wFdAN8BXQGfDd8BYMCgwKDAoMDdAR0AHxgdARkAXQGdAJ0BGQBfGl0BnQEZAF0BnQEZAF8bXQGdAJ0A3QGfDt8BYMCfCGDAnxVgwJ8O4MCgwN8N4MCdAN8FXw/gwKDA3QEZAF0A3wFdAZ8Z3xYgwKDAnQBdAJ0BGQBdAZ0BGQCdAN0AnwKfAqDAnwcgwJ0A3wFdAN0AXQCdAN8IXwhgwJ8VYMCgwF0Bnw7fDuDAoMCgwKDA3xPgwJ0BnxTfDqDAoMDfDWDAoMBgwODAoMDdAd0A3wVfD+DAoMBgwJ8T4MCdAZ8U3w6gwKDA4MCdAZ8PXQGdARkAXxWfEaDA3QBdAJ0BGQBfGl0BnQEZAJ0Bnw7fDeDAnwhgwN0BXQEZAF8VXQGfDt0AXQCdAN8IXw7gwJ8VYMCgwGDAoMDfDeDAoMCgwN0B3wvgwGDAoMBgwKDAnQEZAF0A3QEdAh0CGQCgwGDAXwFdAN8BXQDfFZ0A3QHdAF0AnQEZAF8aXQGdARkAXQGfDt8N4MCdAd8MIMBgwN0BXQEZAF0BnQFdARkAXQDfAV0A3wFdAZ8O3w7gwKDAoMCdAF0AnQDfCx8IYMCfFWDAoMBgwN8BYMCfDuDAnQGfDt8O4MCgwN0BnxnfG2DAoMCgwKDA3QHfC+DAYMCgwGDAXQGfDd8O4MCgwKDAoMCgwN0BGQCdAZ8L3QBdAJ0BHQIZAGDAXxpdAZ0BGQBdAZ0A3wFdAZ8PXxPgwKDAnw3gwJ0A3QDfCF8IYMCfD+DAoMDdARkAXQDfAV0Bnw9fE+DAoMCdAF0AnxgfFWDAoMBgwODAoMDdAd8O4MBgwKDAYMCfCiDA4MCdARkAXw3dAJ8K3w7gwKDA4MDgwODAoMCdARkAXxGdAZ0Bnw3fDuDAnxtgwKDA4MDgwJ0Bnw3fAWDAoMCfAV0A3wFdAN8BXQDfAV0Bnw3fAWDAoMCgwKDAoMDdARkAXQGdARkAnxWfEaDA3QBdAJ0BGQBfGl0BnQFdARkAXQDfAV0A3wFdAZ8O3QDfAV0A3wFdAZ0Bnw3fDuDAnw7gwKDAoMCgwKDAoMCdAF0AnQDfCx8IYMCfFWDAoMBgwN8BYMCfDuDAoMDdAd8L4MBgwKDAYMCfCiDA4MCdARkAXQGdARkAnxWfEaDA3QBdAJ0BGQBfGl0BnQEZAF0Bnw7fDeDAnQHfDCDAYMDdAV0BGQBdAZ0BXQEZAF0A3wFdAN8BXxWgwKDAnQBdAJ0A3wsfCGDAnxVgwKDAYMDfAWDAnw7gwJ0Bnw7dAF0AnQDdAZ0BGQCfFZ8RoMDdAF0AnxpdAd8L4MBgwKDAYMCfCGDAnxVgwKDAYMCgwN0BnxnfG2DAoMCgwKDA3QHfC+DAYMCgwGDAnwogwODAnQEZAF8N3QGfG18bYMCgwODA4MCdARkAXQDfAV0A3wFfAaDAoMCdAZ8bXxtgwKDA4MCdAN8BXQDfAV0Bnw7fDuDAoMCgwJ0Bnw9fDuDAoMDdAV0BGQBdAZ0BnQGdAZ8BXxngwJ8O4MCdAF0AnQEZAF8aXQGfFt0BGQBfFN8L4MDgwKDA3QHfC+DAYMCgwGDAnw7gwJ0Bnw7dAF0CXxYgwGDAYMCgwN0BnxnfG2DAoMCgwODAlMAlE6IiYeUKIwCbHSUjANjb3OUjANzdWKUjANhZGSUjAxpZl90aGVuX2Vsc2WUjAxwcm90ZWN0ZWREaXaUjANtdWyUjANzaW6UjARub3RflIwDbmVnlHSUKIwDSU4wlIwDSU4xlIwDSU4ylIwDSU4zlIwDSU40lIwDSU41lIwDSU42lIwDSU43lIwDSU44lIwDSU45lIwESU4xMJSMBElOMTGUjARJTjEylIwESU4xM5SMBElOMTSUjARJTjE1lIwESU4xNpSMBElOMTeUjARJTjE4lIwESU4xOZSMBElOMjCUjARJTjIxlIwESU4yMpSMBElOMjOUjARJTjI0lIwESU4yNZSMBElOMjaUjARJTjI3lIwESU4yOJSMBElOMjmUjARJTjMwlIwESU4zMZSMBElOMzKUjARJTjMzlIwESU4zNJSMBElOMzWUjARJTjM2lIwESU4zN5SMBElOMziUjARJTjM5lIwESU40MJSMBElONDGUjARJTjQylIwESU40M5SMBElONDSUjARJTjQ1lIwESU40NpSMBElONDeUjARJTjQ4lIwESU40OZSMBElONTCUjARJTjUxlIwESU41MpSMBElONTOUjARJTjU0lIwESU41NZSMBElONTaUjARJTjU3lIwESU41OJSMBElONTmUjARJTjYwlIwESU42MZSMBElONjKUjARJTjYzlIwESU42NJSMBElONjWUjARJTjY2lIwESU42N5SMBElONjiUjARJTjY5lIwESU43MJSMBElONzGUjARJTjcylIwESU43M5SMBElONzSUjARJTjc1lIwESU43NpSMBElONzeUjARJTjc4lIwESU43OZSMBElOODCUjARJTjgxlIwESU44MpSMBElOODOUjARJTjg0lIwESU44NZSMBElOODaUjARJTjg3lIwESU44OJSMBElOODmUjARJTjkwlIwESU45MZSMBElOOTKUjARJTjkzlIwESU45NJSMBElOOTWUjARJTjk2lIwESU45N5SMBElOOTiUjARJTjk5lIwFSU4xMDCUjAVJTjEwMZSMBUlOMTAylIwFSU4xMDOUjAVJTjEwNJSMBUlOMTA1lIwFSU4xMDaUjAVJTjEwN5SMBUlOMTA4lIwFSU4xMDmUjAVJTjExMJSMBUlOMTExlIwFSU4xMTKUjAVJTjExM5SMBUlOMTE0lIwFSU4xMTWUjAVJTjExNpSMBUlOMTE3lIwFSU4xMTiUjAVJTjExOZR0lIwIPHN0cmluZz6UjAg8bGFtYmRhPpRLAUMAlCkpdJRSlH2UTk5OdJRSlIwcY2xvdWRwaWNrbGUuY2xvdWRwaWNrbGVfZmFzdJSMEl9mdW5jdGlvbl9zZXRzdGF0ZZSTlGiWfZR9lCiMCF9fbmFtZV9flGiQjAxfX3F1YWxuYW1lX1+UaJCMD19fYW5ub3RhdGlvbnNfX5R9lIwOX19rd2RlZmF1bHRzX1+UTowMX19kZWZhdWx0c19flE6MCl9fbW9kdWxlX1+UTowHX19kb2NfX5ROjAtfX2Nsb3N1cmVfX5ROjBdfY2xvdWRwaWNrbGVfc3VibW9kdWxlc5RdlIwLX19nbG9iYWxzX1+UfZQoaBBoBShoCChLAksASwBLAksIS0NDJnoKfAB8ARsAVwBTAAQAdABrCnIgAQABAAEAWQBkAVMAWABkAFMAlE5LAYaUjBFaZXJvRGl2aXNpb25FcnJvcpSFlIwEbGVmdJSMBXJpZ2h0lIaUjDFDOi9Vc2Vycy9BZG1pbmlzdHJhdG9yL1B5Y2hhcm1Qcm9qZWN0cy9Fdm8yL0dQLnB5lGgQS5BDCAABAgAKAQ4AlCkpdJRSlH2UKIwLX19wYWNrYWdlX1+UTmicjAhfX21haW5fX5SMCF9fZmlsZV9flIwxQzovVXNlcnMvQWRtaW5pc3RyYXRvci9QeWNoYXJtUHJvamVjdHMvRXZvMi9HUC5weZR1Tk5OdJRSlGiZaLp9lH2UKGicaBBonWgQaJ59lGigTmihTmiiaLZoo05opE5opV2UaKd9lHWGlIZSMGgOjAlfb3BlcmF0b3KUjANhZGSUk5RoEWjBjANtdWyUk5RoFGjBjANuZWeUk5RoE2jBjARub3RflJOUaAtowYwCbHSUk5RoEowKbnVtcHkuY29yZZSMEl91ZnVuY19yZWNvbnN0cnVjdJSTlIwcbnVtcHkuY29yZS5fbXVsdGlhcnJheV91bWF0aJSMA3NpbpSGlFKUaA9oBShoCChLA0sASwBLA0sBS0NDEHwAcgh8AVMAfAJTAGQAUwCUToWUKYwFaW5wdXSUjAdvdXRwdXQxlIwHb3V0cHV0MpSHlGiwaA9LlUMGAAEEAAQBlCkpdJRSlGi0Tk5OdJRSlGiZaN19lH2UKGicaA9onWgPaJ59lGigTmihTmiiaLZoo05opE5opV2UaKd9lHWGlIZSMGgMaM5oz4wDY29zlIaUUpRoDWjBjANzdWKUk5R1dYaUhlIwLg=='

COL1_AVG = 3618.046
COL1_SD = 13129.675
COL2_AVG = 99.979
COL2_SD = 0.159
COL3_AVG = 3778.947
COL3_SD = 16734.940
COL4_AVG = 100.017
COL4_SD = 0.158


def str2lambda(string):
    b = base64.b64decode(string)
    exp = cloudpickle.loads(b)
    return exp

def normalization(data, deepnessRows):
    new_data = []
    for i in range(deepnessRows):
        new_data.append([0] * len(data[0]))
        for j in range(len(data[0])):
            # skips the label
            if j == 0:
                new_data[i][j] = data[i][j]
                continue
            if j % 4 == 1:
                new_data[i][j] = (data[i][j] - COL1_AVG) / COL1_SD
            elif j % 4 == 2:
                new_data[i][j] = (data[i][j] - COL2_AVG) / COL2_SD
            elif j % 4 == 3:
                new_data[i][j] = (data[i][j] - COL3_AVG) / COL3_SD
            else:
                new_data[i][j] = (data[i][j] - COL4_AVG) / COL4_SD

    return new_data

def makePredictionFileFromTestInput(func):
    data = []
    with open(inFile) as data_file:
        data_reader = csv.reader(data_file)
        row_count = sum(1 for row in data_reader)
    with open(inFile) as data_file:
        data_reader = csv.reader(data_file)
        for i in range(row_count):
            row = data_reader.__next__()
            row[0] = 2
            data.append(list(float(elem) for elem in row))
    dataNorm = normalization(data, row_count)
    # Evaluate labels
    if len(dataNorm[0]) == 121:
        result = [bool(func(*mail[1:])) for mail in dataNorm]
    else:
        raise (f'enexpected length! {len(dataNorm[0])}')
    with open(outFile,'w') as f:
        for i in range(row_count):
            resI = result[i]
            f.write(str(int(resI)))
            if(i != (row_count -1)):
                f.write('\n')

def main():
    # get chosen function
    func = str2lambda(funcFinal)
    makePredictionFileFromTestInput(func)

if __name__ == "__main__":
    main()
